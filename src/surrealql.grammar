@top Script {
    (statement Semi)*
    statement
}

@top SingleStatement {
    statement
}

@precedence {
    int,
    array @left,
    dot @left,
    exp @left,
    times @left,
    plus @left,
    comparison @left,
    and @left,
    or @left
}

@skip { whitespace | LineComment }

kw<term> { @specialize[@name={term}]<identifier, term> }
ckw<term> { @extend[@name={term}]<identifier, term> }

Table { identifier }
RecordID {
    Table ":"
    (identifier | RIDStart RIDContent RIDEnd | RIDDelim RIDDelimContent RIDDelim | Array | Object)
}
RecordRange {
    Table ":"
    (
        number? (".." | "..=") number? |
        Array? (".." | "..=") Array? |
        Object? (".." | "..=") Object?
    )
}
GeneratedRecordID {
    Table ":" FunctionCall
}
Variable {
    "$" identifier
}

StringPrefix {
    ckw<"s"> | ckw<"r"> | ckw<"d"> | ckw<"u">
}

@skip {} {
    String[isolate] {
        StringPrefix?
        ('"' (stringContentDouble | Escape)* ('"') |
        "'" (stringContentSingle | Escape)* ("'"))
    }
}

Integer { int }
Decimal { int !int ("." int)? "dec" }
Float { int !int (("." int) "f"? | "f" ) }
Duration { int DurationUnit }
DurationUnit {
    "d" | "h" | "m" | "s" | "ms" | "us" | "ns"
}

number { Decimal | Float | Integer  }

Array {
    "[" (expression (Comma expression)*)? "]"
}
Property {
    identifier
}
Object {
    "{" (Property ":" expression (Comma Property ":" expression)*)? "}"
}
Namespace {
    identifier
}
FunctionName {
    identifier
}
FunctionCall {
    (Namespace "::" )* FunctionName "(" (expression (Comma expression)*)? ")"
}
Constant {
    (Namespace "::")?
    identifier
}
Cast {
    "<" identifier ">" expression
}
Future {
    "<future>" "{"
        expression
    "}"
}
Column {
    identifier
}
Field {
    expression ("as" identifier)? |
    "*"
}
BinaryExpression {
    expression !and And expression |
    expression !or Or expression |
    expression !comparison (
        Comparison | "@" identifier "@"
    ) expression |
    expression !exp Raise expression |
    expression !times (DivideOrMultiply) expression |
    expression !plus (AddOrSubtract) expression |
    expression !dot (("." "*")+ | ("." "*")* "." expression) |
    expression? !dot "->" expression |
    expression !array ("[" expression "]")
}

ReturnStatement {
    kw<"return"> expression
}
maybeTransaction {
    kw<"transaction">?
}
BeginStatement {
    kw<"begin"> maybeTransaction
}
BreakStatement {
    kw<"break">
}
CancelStatement {
    kw<"cancel"> maybeTransaction
}
CommitStatement {
    kw<"commit"> maybeTransaction
}
ContinueStatement {
    kw<"continue">
}
UseStatement {
    kw<"use">
    (kw<"ns"> identifier)?
    (kw<"db"> identifier)?
}
ThrowStatement {
    kw<"throw"> expression
}
SleepStatement {
    kw<"sleep"> expression
}
ShowStatement {
    kw<"show"> ckw<"changes"> kw<"for"> ckw<"table">
    expression
    ("since" expression)?
    ("limit" expression)?
}
LetStatement {
    kw<"let"> Variable "=" (expression | statement)
}
InfoStatement {
    kw<"info"> kw<"for">
    (
        kw<"root"> |
        kw<"ns"> | kw<"namespace"> |
        kw<"db"> | kw<"database"> |
        kw<"scope"> expression |
        ckw<"table"> expression
    )
}
orderBy {
    expression ("collate" | "numeric")? ("asc" | "desc")?
}
maybeValue {
    kw<"value">?
}
maybeAt {
    kw<"at">?
}
maybeBy {
    kw<"by">?
}
selectWith {
    ("with" (kw<"noindex"> | kw<"index"> identifier (Comma identifier)))?
}
maybeOnly {
    kw<"only">?
}
selectOrder {
    ("order" maybeBy orderBy (Comma orderBy)*)?
}
selectFrom {
    ("from" maybeOnly expression (Comma expression)*)?
}
Where {
    "where" expression
}
SelectStatement {
    kw<"select">
    maybeValue
    (Field (Comma Field)*)
    ("omit" Field (Comma Field)*)?
    selectFrom
    selectWith
    Where?
    ("split" maybeAt expression)?
    ("group" maybeBy expression (Comma expression)*)?
    selectOrder
    ("limit" maybeBy expression)?
    ("start" maybeAt expression)?
    ("timeout" expression)?
    "parallel"?
    ("explain" kw<"full">?)?
}

ForStatement {
    kw<"for"> expression "in" expression "{" (statement Semi)* statement "}"
}

// IfStatement {
//     kw<"if"> expression "then"? expression
//     ("else" "if" expression "then"? expression)*
//     ("else" expression)?
// }

Bool { kw<"true"> | kw<"false"> }
None { kw<"none"> }
Null { kw<"null"> }

expression {
    String |
    number |
    Duration |
    Array |
    Object |
    FunctionCall |
    Future |
    Variable |
    Cast |
    RecordID |
    Column |
    ParenthesizedExpression |
    BinaryExpression |
    Bool |
    None |
    Null
}
ParenthesizedExpression {
    "(" (expression | statement) ")"
}

statement[@isGroup=Statement] {
    ReturnStatement |
    BeginStatement |
    BreakStatement |
    CancelStatement |
    CommitStatement |
    ContinueStatement |
    UseStatement |
    ThrowStatement |
    SleepStatement |
    ShowStatement |
    LetStatement |
    InfoStatement |
    SelectStatement |
    ForStatement // |
    // IfStatement
}

@local tokens {
    blockCommentEnd { "*/" }
    blockCommentNewline { "\n" }
    @else blockCommentContent
}

@skip {} { BlockComment { "/*" (blockCommentContent | blockCommentNewline)* blockCommentEnd } }

@tokens {
    whitespace { @whitespace+ }
    LineComment { ("//" | "-- ") ![\n]* }

    int { @digit+ }

    identifier { $[a-zA-Z] $[a-zA-Z0-9_]* }

    RIDDelim { "`" }
    RIDStart { "⟨" }
    RIDEnd { "⟩" }
    RIDDelimContent { $[^`]+ }
    RIDContent { $[^⟨⟩]+ }

    Divide { "/" | "÷" }
    Multiply { "*" | "×" }
    DivideOrMultiply { Divide | Multiply }
    Add { "+" }
    Subtract { "-" }
    AddOrSubtract { Add | Subtract }
    Raise { "**" }

    Escape {
      "\\" ("x" hex hex | "u" ("{" hex+ "}" | hex hex hex hex) | ![xu])
    }
    hex { @digit | $[a-fA-F] }
    stringContentSingle { ![\\']+ }
    stringContentDouble { ![\\"]+ }

    Comma { "," }
    Semi { ";" }
    Comparison {
        "??" | "?:" |
        "=" | "IS" |
        "!=" | "IS NOT"|
        "==" |
        "?=" | "*=" |
        "~" | "!~" | "?~" | "*~" |
        "IN" | "NOT IN" |
        "CONTAINS" | "∋" |
        "CONTAINSNOT" | "∌" |
        "CONTAINSALL" | "⊇" |
        "CONTAINSANY" | "⊃" |
        "CONTAINSNONE" | "⊅" |
        "INSIDE" | "∈" |
        "NOTINSIDE" | "NOT IN" | "∉" |
        "ALLINSIDE" | "⊆" |
        "ANYINSIDE" | "⊂" |
        "NONEINSIDE" | "⊄" |
        "OUTSIDE" |
        "INTERSECTS" |
        "<" | ">" | "<=" | ">=" |
        "@@"
    }
    And { "&&" | "and" }
    Or { "||" | "or" }

    "/*"
    "(" ")" "[" "]" "{" "}"

    "."
    "->"

    @precedence { "/*", LineComment, Divide }
    @precedence { "/*", LineComment, DivideOrMultiply}
    @precedence { LineComment, Subtract }
    @precedence { LineComment, AddOrSubtract }
}

@detectDelim