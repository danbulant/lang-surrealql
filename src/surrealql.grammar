@top Script {
    (statement Semi)*
    statement
}

@top SingleStatement {
    statement
}

@precedence {
    int,
    array @left,
    dot @left,
    exp @left,
    times @left,
    plus @left,
    comparison @left,
    and @left,
    or @left
}

@skip { whitespace | LineComment | BlockComment }

@external tokens tokens from "./tokens" {
    As,
    Since,
    Limit,
    Collate,
    Numeric,
    Asc,
    Desc,
    With,
    Order,
    Omit,
    Where,
    From,
    Split,
    Group,
    Start,
    Timeout,
    Parallel,
    Explain,
    In,
    Then,
    Else,
    End//,
    // identifier
}
@external specialize {identifier} specializeIdent from "./tokens" {
    Return,
    Transaction,
    Begin,
    Break,
    Cancel,
    Commit,
    Continue,
    Use,
    Ns,
    Db,
    Throw,
    Sleep,
    Show,
    For,
    Let,
    Info,
    Root,
    Namespace,
    Database,
    Scope,
    Value,
    At,
    By,
    Noindex,
    Index,
    Only,
    Full,
    If,
    True,
    False,
    None,
    Null,
    Comparison,
    And,
    Or,
    Select
}
@external extend {identifier} extendIdent from "./tokens" {
    Changes,
    Table
}

kw<term> { @specialize[@name={term}]<identifier, term> }
ckw<term> { @extend[@name={term}]<identifier, term> }

TableId { identifier }
RecordID {
    TableId ":"
    (identifier | RIDStart RIDContent RIDEnd | RIDDelim RIDDelimContent RIDDelim | Array | Object)
}
RecordRange {
    TableId ":"
    (
        number? (".." | "..=") number? |
        Array? (".." | "..=") Array? |
        Object? (".." | "..=") Object?
    )
}
GeneratedRecordID {
    TableId ":" FunctionCall
}
Variable {
    "$" identifier
}

StringPrefix {
    ckw<"s"> | ckw<"r"> | ckw<"d"> | ckw<"u">
}

@skip {} {
    String[isolate] {
        StringPrefix?
        ('"' (stringContentDouble | Escape)* ('"') |
        "'" (stringContentSingle | Escape)* ("'"))
    }
}

Integer { int }
Decimal { int !int ("." int)? kw<"dec"> }
Float { int !int (("." int) ckw<"f">? | ckw<"f"> ) }
Duration { int DurationUnit }
DurationUnit {
    ckw<"d"> |
    ckw<"h"> |
    ckw<"m"> |
    ckw<"s"> |
    ckw<"ms"> |
    ckw<"us"> |
    ckw<"ns">
}

number { Decimal | Float | Integer  }

Array {
    "[" (expression (Comma expression)*)? "]"
}
Property {
    identifier
}
Object {
    "{" (Property ":" expression (Comma Property ":" expression)*)? "}"
}
NamespaceId {
    identifier
}
FunctionName {
    identifier
}
FunctionCall {
    (NamespaceId "::" )* FunctionName "(" (expression (Comma expression)*)? ")"
}
Constant {
    (NamespaceId "::")+
    identifier
}
Cast {
    "<" identifier ">" expression
}
Future {
    "<future>" "{"
        expression
    "}"
}
Column {
    identifier
}
Field {
    expression (As identifier)? |
    Star
}
@skip {} {
    ReferencedFulltextOperator {
        "@" int+ "@"
    }
}
BinaryExpression {
    expression !and And expression |
    expression !or Or expression |
    expression !comparison (
        Comparison | ReferencedFulltextOperator
    ) expression |
    expression !exp Raise expression |
    expression !times (DivideOrMultiply) expression |
    expression !plus (AddOrSubtract) expression |
    expression !dot (("." Star)+ | ("." Star)* "." expression) |
    expression? !dot "->" expression |
    expression !array ("[" expression "]")
}

ReturnStatement {
    Return expression
}
maybeTransaction {
    Transaction?
}
BeginStatement {
    Begin maybeTransaction
}
BreakStatement {
    Break
}
CancelStatement {
    Cancel maybeTransaction
}
CommitStatement {
    Commit maybeTransaction
}
ContinueStatement {
    Continue
}
UseStatement {
    Use
    (Ns identifier)?
    (Db identifier)?
}
ThrowStatement {
    Throw expression
}
SleepStatement {
    Sleep expression
}
ShowStatement {
    Show Changes For Table
    expression
    (Since expression)?
    (Limit expression)?
}
LetStatement {
    Let Variable "=" (expression | statement)
}
InfoStatement {
    Info For
    (
        Root |
        Ns | Namespace |
        Db | Database |
        Scope expression |
        Table expression
    )
}
orderBy {
    expression (Collate | Numeric)? (Asc | Desc)?
}
maybeValue {
    Value?
}
maybeAt {
    At?
}
maybeBy {
    By?
}
selectWith {
    (With (Noindex | Index identifier (Comma identifier)))?
}
maybeOnly {
    Only?
}
selectOrder {
    (Order maybeBy orderBy (Comma orderBy)*)?
}
selectSource {
    expression |
    RecordRange |
    GeneratedRecordID
}
selectFrom {
    (From maybeOnly selectSource (Comma selectSource)*)?
}
WhereQueryPart {
    Where expression
}
SelectStatement {
    Select
    maybeValue
    (Field (Comma Field)*)
    (Omit Field (Comma Field)*)?
    selectFrom
    selectWith
    WhereQueryPart?
    (Split maybeAt expression)?
    (Group maybeBy expression (Comma expression)*)?
    selectOrder
    (Limit maybeBy expression)?
    (Start maybeAt expression)?
    (Timeout expression)?
    Parallel?
    (Explain Full?)?
}

ForStatement {
    For expression In expression "{" (statement Semi)* statement "}"
}

IfStatement {
    If expression Then expression
    (Else If expression Then expression)*
    (Else expression)?
    End
}

Bool {
    True |
    False
}

expression {
    String |
    number |
    Duration |
    Array |
    Object |
    FunctionCall |
    Future |
    Variable |
    Cast |
    RecordID |
    Column |
    ParenthesizedExpression |
    BinaryExpression |
    Bool |
    None |
    Null |
    Constant
}
ParenthesizedExpression {
    "(" (expression | statement) ")"
}

statement[@isGroup=Statement] {
    ReturnStatement |
    BeginStatement |
    BreakStatement |
    CancelStatement |
    CommitStatement |
    ContinueStatement |
    UseStatement |
    ThrowStatement |
    SleepStatement |
    ShowStatement |
    LetStatement |
    InfoStatement |
    SelectStatement |
    ForStatement |
    IfStatement
}

@local tokens {
    blockCommentEnd { "*/" }
    blockCommentNewline { "\n" }
    @else blockCommentContent
}

@skip {} { BlockComment { "/*" (blockCommentContent | blockCommentNewline)* blockCommentEnd } }

@tokens {
    whitespace { @whitespace+ }
    LineComment { ("//" | "-- ") ![\n]* }

    identifier { $[a-zA-Z_] $[a-zA-Z0-9_]* }

    int { @digit+ }

    RIDDelim { "`" }
    RIDStart { "⟨" }
    RIDEnd { "⟩" }
    RIDDelimContent { $[^`]+ }
    RIDContent { $[^⟨⟩]+ }

    Divide { "/" | "÷" }
    Multiply { "*" | "×" }
    DivideOrMultiply { Divide | Multiply }
    Add { "+" }
    Subtract { "-" }
    AddOrSubtract { Add | Subtract }
    Raise { "**" }
    Star { "*" }

    Escape {
      "\\" ("x" hex hex | "u" ("{" hex+ "}" | hex hex hex hex) | ![xu])
    }
    hex { @digit | $[a-fA-F] }
    stringContentSingle { ![\\']+ }
    stringContentDouble { ![\\"]+ }

    Comma { "," }
    Semi { ";" }

    "/*"
    "(" ")" "[" "]" "{" "}"

    "."
    "->"

    @precedence { "/*", LineComment, Divide }
    @precedence { "/*", LineComment, DivideOrMultiply}
    @precedence { LineComment, Subtract }
    @precedence { LineComment, AddOrSubtract }
}

@detectDelim